/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define DIC 1
#define DICP 2
#define DICL 3
#define LWR 4
#define RSE 5
#define ADJ 6

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
//        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
//        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT\|
//                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |
                        bindings = <
   &kp ESC &kp GRAVE &kp Q &kp W &kp E &kp R &kp T &kp Y         &kp U  &kp I     &kp O   &kp P    &kp LBKT &mt RWIN RBKT
            &mt LSHIFT CAPS &hm LCTRL A &hm LALT S &hm LGUI D &hm LSHIFT F &kp G &kp H  &hm RSHIFT J  &hm RGUI K  &hm RALT L &hm RCTRL SEMI &mt RCTRL SQT
            &kp LALT  &kp Z &kp X &kp C &kp V &kp B &kp N         &kp M  &kp COMMA &kp DOT &kp FSLH &mt RALT BSLH
                         &lt RSE TAB &kp SPACE &lt LWR BSPC &lt LWR ESC &mt RSHFT RET &lt RSE DEL
                        >;
                };

                dictor_layer {
// |QWERTY|   ~  |  W  |  M  |  Z  |  /  |  ?  |   |  P  |  D   |  R  |  L  |  X  |  I   | O |
//        | CTRL |  E  |  B  |  T  |  J  |  F  |   |  K  |  Y   |  N  |  C  |  H  |  Q   |
//        | Shift|  A  |  "  |  [  |  S  |  .  |   |  ,  |  V   |  G  |  U  |  ;  | Shift|
//                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

                        bindings = <
   &tog DIC &kp GRAVE  &kp W        &kp M        &kp Z        &kp CARET    &kp AMPS           &kp P        &kp D        &kp R        &kp L        &kp X         &kp I      &kp O
          &kp CAPS     &hm LCTRL E  &kp B        &hm LGUI T   &lt DICP J  &kp F              &kp K        &lt DICP Y        &hm RGUI N        &kp C        &kp H         &kp Q
          &lt DICP LSHIFT   &kp A        &kp SQT      &kp LBKT     &kp S        &kp DOT            &kp COMMA    &kp V        &kp G        &kp U        &kp SEMI      &mt DICP LSHIFT
                                                                    &lt RSE TAB &kp SPACE &lt DICL BSPC &lt DICL ESC &mt RSHFT RET &lt RSE DEL

                        >;
                };

                dictorshift_layer {
// |QWERTY|   ~  |  W  |  M  |  Z  |  /  |  ?  |   |  P  |  D   |  R  |  L  |  X  |  I   | O |
//        | CTRL |  E  |  B  |  T  |  J  |  F  |   |  K  |  Y   |  N  |  C  |  H  |  Q   |
//        | Shift|  A  |  "  |  [  |  S  |  .  |   |  ,  |  V   |  G  |  U  |  ;  | Shift|
//                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

                        bindings = <
   &none &kp LS(GRAVE)  &kp LS(W)       &kp RBKT    &kp LS(Z)     &kp LS(FSLH)   &kp EXCL          &kp RS(P)    &kp RS(D)        &kp RS(R)        &kp RS(L)        &kp RS(X)     &kp RS(I)     &kp RS(O)
          &none   &kp LS(E)  &kp LS(B)    &kp LS(T)   &kp LS(J)  &kp LS(F)              &kp RS(K)    &kp RS(Y)        &kp RS(N)      &kp RS(C)     &kp RS(H)         &kp RS(Q)
          &none   &kp LS(A)  &kp LS(SQT)  &kp LS(LBKT)  &kp LS(S)  &kp LS(DOT)          &kp RS(COMMA)    &kp RS(V)    &kp RS(G)      &kp RS(U)     &kp RS(SEMI)      &none
                                                                    &lt RSE TAB &kp SPACE &lt LWR BSPC &lt LWR ESC &mt RSHFT RET &lt RSE DEL

                        >;
                };

                dictorlower_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp UNDER      &kp LS(M)  &kp LS(RBKT)    &kp HASH     &kp DLLR        &kp PRCNT     &kp CARET &kp AMPS        &kp STAR    &kp LPAR    &kp RPAR  &kp MINUS &kp EQUAL
          &mt LCTRL PLUS &kp N1     &kp N2          &kp N3       &hm LSHIFT N4   &kp N5        &kp N6    &hm RSHIFT N7   &kp N8      &kp N9      &kp N0    &kp PLUS
          &mt LALT EQUAL &kp F1     &kp F2          &kp F3       &kp F4          &kp F5        &kp F6    &kp F7          &kp F8      &kp F9      &kp F10   &tog DIC
                                              &lt ADJ TAB &trans &trans   &trans &trans &lt ADJ DEL
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp UNDER      &kp EXCL   &kp AT &kp HASH     &kp DLLR        &kp PRCNT     &kp CARET &kp AMPS        &kp STAR    &kp LPAR    &kp RPAR  &kp MINUS &kp EQUAL
          &mt LCTRL PLUS &kp N1     &kp N2 &kp N3       &hm LSHIFT N4   &kp N5        &kp N6    &hm RSHIFT N7   &kp N8      &kp N9      &kp N0    &kp PLUS
          &mt LALT EQUAL &kp F1     &kp F2 &kp F3       &kp F4          &kp F5        &kp F6    &kp F7          &kp F8      &kp F9      &kp F10   &tog DIC
                                              &lt ADJ TAB &trans &trans   &trans &trans &lt ADJ DEL
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME|  UP | PGUP| SCLK| CLCK|     |
//       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT| DOWN| RGHT| INS | APP |
//       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | PRTS| PGDN| PAUS|     |
//                          |     |     | ADJ |   | ADJ |     |     |
                        bindings = <
   &trans &kp KP_NUM      &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS        &kp C_VOL_UP &kp HOME &kp UP    &kp PG_UP &kp SLCK &kp CAPS &trans
          &mt LCTRL EQUAL &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS         &kp C_MUTE   &kp LEFT &kp DOWN    &kp RIGHT &kp INS  &mt RCTRL K_APP
          &trans          &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT          &kp C_VOL_DN &kp END  &kp PSCRN &kp PG_DN &kp PAUSE_BREAK &trans
                                                           &trans &trans &lt ADJ RET   &lt ADJ ESC &trans &trans
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
                        bindings = <
   &reset &bootloader  &tog DIC     &none        &none        &none        &none              &none        &none        &none        &none        &none         &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none        &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &none
                                                                    &trans &none &trans   &trans &none &trans
                        >;
                };
        };
};
